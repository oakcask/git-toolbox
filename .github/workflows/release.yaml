name: Release
on:
  push:
    branches:
      - main
  pull_request:
    paths:
      # to develop or debug this workflow
      - .github/workflows/release.yaml
      - .releaserc.yaml

jobs:
  get-next-version:
    permissions:
      contents: write
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  cargo-toml-updated:
    runs-on: ubuntu-latest
    needs:
      - get-next-version
    outputs:
      updated: ${{ steps.check-updated.outputs.updated }}
    steps:
      - uses: actions/checkout@v5
      - uses: EricCrosson/install-github-release-binary@v2
        with:
          targets: semantic-release-cargo/semantic-release-cargo@v2.2.96
        if: needs.get-next-version.outputs.new-release-published == 'true'
      - run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}
        if: needs.get-next-version.outputs.new-release-published == 'true'
      - id: check-updated
        run: git diff --exit-code && echo "updated=true" >> "$GITHUB_OUTPUT"
        # wanted not to workflow status being failure. 
        continue-on-error: true

  build:
    strategy:
        matrix:
          build:
            - os: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              cross: false
            - os: ubuntu-latest
              target: aarch64-unknown-linux-gnu
              cross: true
            - os: macos-latest
              target: aarch64-apple-darwin
              cross: false
    runs-on: ${{ matrix.build.os }}
    needs:
      - get-next-version
      - cargo-toml-updated
    if: ${{ needs.get-next-version.outputs.new-release-published == 'true' && needs.cargo-toml-updated.outputs.updated == 'true' }}
    env:
      CARGO: "cargo"
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Enable cross
        run: cargo install cross && echo "CARGO=cross" >> "$GITHUB_ENV"
        if: matrix.build.cross
      - run: ${{ env.CARGO }} --locked build --release --target=${{ matrix.build.target }} --bins
      - name: Prepare artifacts to upload
        run: |
          mkdir -p dist/${{ matrix.build.target }}
          find target/${{ matrix.build.target }}/release -maxdepth 1 \
            -type f \! -name '.cargo-lock' \! -name '*.d' -print0 \
            | xargs -I{} -r -0 cp {} dist/${{ matrix.build.target }}/
          tar -C dist/${{ matrix.build.target }} -czf dist/${{ matrix.build.target }}.tar.gz ./
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.target }}.tar.gz
          path: |
            dist/${{ matrix.build.target }}.tar.gz
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs:
      - get-next-version
      - cargo-toml-updated
      - build
    if: ${{ needs.get-next-version.outputs.new-release-published == 'true' && needs.cargo-toml-updated.outputs.updated == 'true' }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          path: dist
      - id: gh-token-gen
        uses: oakcask/gh-token-gen@v2.0.15
        with:
          app-id: ${{ secrets.TOKEN_GEN_APP_ID }}
          private-key: ${{ secrets.TOKEN_GEN_PRIVATE_KEY }}
      - uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ github.ref != 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ steps.gh-token-gen.outputs.token }}
